/**
 * WASM Integration Tests - Story 1.1
 * Tests the WASM compilation pipeline and basic audio processing structure
 */

const fs = require('fs');
const path = require('path');

describe('WASM Build Pipeline Integration', () => {
    const pkgDir = path.join(__dirname, '../../pkg');
    const requiredFiles = [
        'pitch_toy.js',
        'pitch_toy_bg.wasm',
        'pitch_toy.d.ts',
        'pitch_toy_bg.wasm.d.ts',
        'package.json'
    ];

    beforeAll(() => {
        // Ensure pkg directory exists (should be generated by wasm-pack)
        expect(fs.existsSync(pkgDir)).toBe(true);
    });

    test('should generate all required WASM package files', () => {
        requiredFiles.forEach(file => {
            const filePath = path.join(pkgDir, file);
            expect(fs.existsSync(filePath)).toBe(true);
            
            // Verify file is not empty
            const stats = fs.statSync(filePath);
            expect(stats.size).toBeGreaterThan(0);
        });
    });

    test('should generate valid package.json', () => {
        const packagePath = path.join(pkgDir, 'package.json');
        const packageContent = fs.readFileSync(packagePath, 'utf8');
        const packageJson = JSON.parse(packageContent);

        expect(packageJson.name).toBe('pitch-toy');
        expect(packageJson.module).toBe('pitch_toy.js');
        expect(packageJson.types).toBe('pitch_toy.d.ts');
        expect(packageJson.files).toContain('pitch_toy_bg.wasm');
    });

    test('should generate TypeScript definitions with AudioEngine', () => {
        const dtsPath = path.join(pkgDir, 'pitch_toy.d.ts');
        const dtsContent = fs.readFileSync(dtsPath, 'utf8');

        // Check for AudioEngine class definition
        expect(dtsContent).toContain('export class AudioEngine');
        expect(dtsContent).toContain('constructor(sample_rate: number, buffer_size: number)');
        expect(dtsContent).toContain('process_audio_buffer');
        expect(dtsContent).toContain('set_enabled');
        expect(dtsContent).toContain('get_sample_rate');
        expect(dtsContent).toContain('get_buffer_size');
    });

    test('should generate JavaScript module with proper exports', () => {
        const jsPath = path.join(pkgDir, 'pitch_toy.js');
        const jsContent = fs.readFileSync(jsPath, 'utf8');

        // Check for ES module exports
        expect(jsContent).toContain('export { AudioEngine }');
        expect(jsContent).toContain('export default init');
        
        // Check for WASM loading
        expect(jsContent).toContain('pitch_toy_bg.wasm');
    });

    test('should generate WASM binary with expected size range', () => {
        const wasmPath = path.join(pkgDir, 'pitch_toy_bg.wasm');
        const stats = fs.statSync(wasmPath);
        
        // WASM file should be reasonable size (not too small/large)
        expect(stats.size).toBeGreaterThan(1000); // At least 1KB
        expect(stats.size).toBeLessThan(1000000); // Less than 1MB for basic pipeline
    });

    test('should have valid WASM magic number', () => {
        const wasmPath = path.join(pkgDir, 'pitch_toy_bg.wasm');
        const buffer = fs.readFileSync(wasmPath);
        
        // Check WASM magic number (0x00 0x61 0x73 0x6D)
        expect(buffer[0]).toBe(0x00);
        expect(buffer[1]).toBe(0x61);
        expect(buffer[2]).toBe(0x73);
        expect(buffer[3]).toBe(0x6D);
    });
}); 